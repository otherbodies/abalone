plot(clu2,labels=cluLabels,main="hierarchical cluster ward")
groups = cutree(clu2,3)
rect.hclust(clu2, k=3, border="red")
fitcluna = which(mainTable$rounds=="both" & is.na(mainTable$trunk_fit_mixed)==0)
fitClu = mainTable[fitcluna,]
cluLabels = paste(as.character(fitClu$participant),as.character(fitClu$bestfit_mixed),as.character(fitClu$best_ratio_mixed))
clu2 = hclust(dist(fitClu[c("trunk_fit_mixed","head_fit_mixed","room_fit_mixed")]),method="ward.D")
plot(clu2,labels=cluLabels,main="hierarchical cluster ward")
groups = cutree(clu2,3)
rect.hclust(clu2, k=3, border="red")
fitcluna = which(mainTable$rounds=="both" & is.na(mainTable$trunk_fit_mixed)==0)
fitClu = mainTable[fitcluna,]
cluLabels = paste(as.character(fitClu$participant),as.character(fitClu$bestfit_mixed),as.character(fitClu$best_ratio_mixed))
clu2 = hclust(dist(fitClu[c("trunk_fit_mixed","head_fit_mixed","room_fit_mixed")]),method="ward.D2")
plot(clu2,labels=cluLabels,main="hierarchical cluster ward")
groups = cutree(clu2,3)
rect.hclust(clu2, k=3, border="red")
fitcluna_cr = which(mainTable$rounds=="both" & is.na(mainTable$trunk_fit_reg_cr)==0)
fitClu_cr = mainTable[fitcluna_cr,]
cluLabels = paste(as.character(fitClu_cr$participant),as.character(fitClu_cr$bestfit_reg_cr),as.character(fitClu_cr$best_ratio_reg_cr))
clu2 = hclust(dist(fitClu_cr[c("trunk_fit_reg_cr","head_fit_reg_cr","room_fit_reg_cr")]),method="ward.D")
plot(clu2,labels=cluLabels,main="hierarchical cluster ward2")
groups = cutree(clu2,3)
rect.hclust(clu2, k=3, border="red")
fitcluna_cr = which(mainTable$rounds=="both" & is.na(mainTable$trunk_fit_reg_cr)==0)
fitClu_cr = mainTable[fitcluna_cr,]
cluLabels = paste(as.character(fitClu_cr$participant),as.character(fitClu_cr$bestfit_reg_cr),as.character(fitClu_cr$best_ratio_reg_cr))
clu2 = hclust(dist(fitClu_cr[c("trunk_fit_reg_cr","head_fit_reg_cr","room_fit_reg_cr")]),method="ward.D")
plot(clu2,labels=cluLabels,main="hierarchical cluster ward")
groups = cutree(clu2,3)
rect.hclust(clu2, k=3, border="red")
fitcluna_cr = which(mainTable$rounds=="both" & is.na(mainTable$trunk_fit_reg_cr)==0)
fitClu_cr = mainTable[fitcluna_cr,]
cluLabels = paste(as.character(fitClu_cr$participant),as.character(fitClu_cr$bestfit_reg_cr),as.character(fitClu_cr$best_ratio_reg_cr))
clu2 = hclust(dist(fitClu_cr[c("trunk_fit_reg_cr","head_fit_reg_cr","room_fit_reg_cr")]),method="ward.D")
plot(clu2,labels=cluLabels,main="hierarchical cluster ward2")
groups = cutree(clu2,3)
rect.hclust(clu2, k=3, border="red")
View(systemOutlierCount_exp2_nomini)
View(systemOutlierCount_exp2)
nrow(systemOutlierCount_exp2)
nrow(subset(systemOutlierCount_exp2,task=="month")
)
nrow(subset(systemOutlierCount_exp2,task=="crazy"))
nrow(subset(systemOutlierCount_exp2,task=="mini"))
nrow(subset(systemOutlierCount_exp2,task=="months" && type="synaesthete"))
nrow(subset(systemOutlierCount_exp2,task=="months" && type=="synaesthete"))
nrow(subset(systemOutlierCount_exp2,task=="months" & type=="synaesthete"))
nrow(subset(systemOutlierCount_exp2,(task=="months" && type=="synaesthete")))
nrow(subset(systemOutlierCount_exp2,task=="months",type=="synaesthete"))
nrow(subset(systemOutlierCount_exp2,task=="months" & type=="synaesthete"))
nrow(subset(systemOutlierCount_exp2, type=="synaesthete"))
nrow(subset(systemOutlierCount_exp2,task=="month" & type=="synaesthete"))
View(advOutliers)
View(advOutliers)
View(systemOutlierCount_exp1)
fitcluna_both = which(mainTable$rounds=="both" & is.na(mainTable$trunk_fit_mixed)==0)
fitcluna = which(is.na(mainTable$trunk_fit_mixed)==0)
fitClu = mainTable[fitcluna,]
fitClu_both = mainTable[fitcluna_both,]
cluLabels = paste(as.character(fitClu$participant),as.character(fitClu$bestfit_mixed),as.character(fitClu$best_ratio_mixed))
clu2 = hclust(dist(fitClu[c("trunk_fit_mixed","head_fit_mixed","room_fit_mixed")]),method="ward.D2")
plot(clu2,labels=cluLabels,main="hierarchical cluster ward")
groups = cutree(clu2,3)
rect.hclust(clu2, k=3, border="red")
fitcluna_both_cr = which(mainTable$rounds=="both" & is.na(mainTable$trunk_fit_reg_cr)==0)
fitcluna_cr = which(is.na(mainTable$trunk_fit_reg_cr)==0)
fitClu_cr = mainTable[fitcluna_cr,]
fitClu_both_cr = mainTable[fitcluna_both_cr,]
cluLabels = paste(as.character(fitClu_cr$participant),as.character(fitClu_cr$bestfit_reg_cr),as.character(fitClu_cr$best_ratio_reg_cr))
clu2 = hclust(dist(fitClu_cr[c("trunk_fit_reg_cr","head_fit_reg_cr","room_fit_reg_cr")]),method="ward.D2")
plot(clu2,labels=cluLabels,main="hierarchical cluster ward")
groups = cutree(clu2,3)
rect.hclust(clu2, k=3, border="red")
fitcluna_cr = which(mainTable$rounds=="both" & is.na(mainTable$trunk_fit_reg_cr)==0)
fitClu_cr = mainTable[fitcluna_cr,]
cluLabels = paste(as.character(fitClu_cr$participant),as.character(fitClu_cr$bestfit_reg_cr),as.character(fitClu_cr$best_ratio_reg_cr))
clu2 = hclust(dist(fitClu_cr[c("trunk_fit_reg_cr","head_fit_reg_cr","room_fit_reg_cr")]),method="ward.D2")
plot(clu2,labels=cluLabels,main="hierarchical cluster ward2")
groups = cutree(clu2,3)
rect.hclust(clu2, k=3, border="red")
monthYears = c(rep('room',4),rep('head',9),rep('trunk',7))  # the actual choices made by 20 observers
horseback = c(rep('room',4),rep('head',9),rep('trunk',7))   # put the actual numbers here for the second task
maxSamples = 100000
sameChoices = rep(NA, maxSamples) # to be able to store the results of many simulations
simulnb = 0
while (simulnb<maxSamples)
{
###    select the lines below until the next ### and press CTRL RETURN to run it as many times as you want
simulnb = simulnb+1
monthYearsVector = monthYears  # WE NEED TO REINITIALIZE FOR EACH SIMULATION (draws without replacements)
horsebackVector = horseback
sameRF = rep(F,20)  # the vector where we will check whether the subject chose the same RF twice
for (subject in c(1:20)){
# RANDOMIZATION resampling :
# We are taking randomly, WITHOUT REPLACEMENT, one observed value
choice1 = floor(runif(1, min = 1, max = length(monthYearsVector)+.99))
RF1 = monthYearsVector[choice1]
monthYearsVector = monthYearsVector[-choice1] # REMOVES the value from the vector
# second draw
choice2 = floor(runif(1, min = 1, length(horsebackVector)+.99))
RF2 = horsebackVector[choice2]
horsebackVector = horsebackVector[-choice2]
sameRF[subject] = RF1==RF2
}
sameChoices[simulnb] = sum(sameRF==T)
###
}
hist(sameChoices)
sameChoices = sameChoices[order(sameChoices)]
sameChoices[round(simulnb*.975)]+1 # the 2-sided 95% limit for random choices
binom.test(12,20,p=0.033)
options(scipen=999)
binom.test(12,20,p=0.033)
binom.test(12,20,p=0.33)
binom.test(12,20,p=0.33333)
binom.test(12,20,p=0.365)
sameChoices[50000]
10000*0.975
sameChoices[9750]
sameChoices[97500]
binom.test(12,20,p=0.365, alternative="greater")
pbinom(12, size=20, prob=0.365)
1-pbinom(12, size=20, prob=0.365)
options(scipen=999)
# choice of Reference Frame (RF) for 20 subjects in two tasks
# H0: the choices in both task are indepependant
monthYears = c(rep('room',4),rep('head',9),rep('trunk',7))  # the actual choices made by 20 observers
horseback = c(rep('room',4),rep('head',9),rep('trunk',7))   # put the actual numbers here for the second task
maxSamples = 100000
sameChoices = rep(NA, maxSamples) # to be able to store the results of many simulations
simulnb = 0
while (simulnb<maxSamples)
{
###    select the lines below until the next ### and press CTRL RETURN to run it as many times as you want
simulnb = simulnb+1
monthYearsVector = monthYears  # WE NEED TO REINITIALIZE FOR EACH SIMULATION (draws without replacements)
horsebackVector = horseback
sameRF = rep(F,20)  # the vector where we will check whether the subject chose the same RF twice
for (subject in c(1:20)){
# RANDOMIZATION resampling :
# We are taking randomly, WITHOUT REPLACEMENT, one observed value
choice1 = floor(runif(1, min = 1, max = length(monthYearsVector)+.99))
RF1 = monthYearsVector[choice1]
monthYearsVector = monthYearsVector[-choice1] # REMOVES the value from the vector
# second draw
choice2 = floor(runif(1, min = 1, length(horsebackVector)+.99))
RF2 = horsebackVector[choice2]
horsebackVector = horsebackVector[-choice2]
sameRF[subject] = RF1==RF2
}
sameChoices[simulnb] = sum(sameRF==T)
###
}
hist(sameChoices)
View(conTable)
View(conTable1)
View(conTable2)
View(conTableA)
View(conTableM)
View(tobepooled)
View(data2d)
View(didall2d)
View(data2d)
View(didall2d)
View(pooledsds3)
library("bootES", lib.loc="~/R/win-library/3.2")
library(readxl)
data_for_es <- read_excel("data_for_es.xlsx",
col_types = c("text", "text", "numeric",
"numeric", "numeric", "numeric"))
View(data_for_es)
data_for_es$type = as.factor(data_for_es$type)
View(data_for_es)
es = bootES(data_for_es,data.col = suis, group.col = type, effect.type = "cohens.D")
es
es = bootES(data_for_es,data.col = suis, group.col = type, effect.type = "cohens.d")
es
es = bootES(data_for_es,data.col = "suis", group.col = "type", effect.type = "cohens.d")
es
library("bootES", lib.loc="~/R/win-library/3.2")
data_for_es[11,]
data_for_es = data_for_es[-11,]
View(data_for_es)
es = bootES(data_for_es,data.col = "suis", group.col = "type", effect.type = "cohens.d")
es
es = bootES(data = "data_for_es",data.col = "suis", group.col = "type", effect.type = "cohens.d")
es
es = bootES(data = data_for_es,data.col = "suis", group.col = "type", effect.type = "cohens.d")
es
es = bootES(data = data_for_es,data.col = "suis", effect.type = "cohens.d")
es
es = bootES(data = data_for_es,data.col = "suis", group.col = "type", contrast = c("control", "syn"), effect.type = "cohens.d")
es
es = bootES(data = data_for_es,data.col = "suis2", group.col = "type", contrast = c("control", "syn"), effect.type = "cohens.d")
es
es = bootES(data = data_for_es,data.col = "osiq_vis", group.col = "type", contrast = c("control", "syn"), effect.type = "cohens.d")
es
es = bootES(data = data_for_es,data.col = "osiq_spat", group.col = "type", contrast = c("control", "syn"), effect.type = "cohens.d")
es
# bootES calculating all in this manner..
library("bootES", lib.loc="~/R/win-library/3.2")
library(readxl)
data_for_es <- read_excel("data_for_es.xlsx")
View(data_for_es)
data_for_es$type = as.factor(data_for_es$type)
data_for_es = data_for_es[-11,]
es = bootES(data = data_for_es,data.col = "suis", group.col = "type", contrast = c("control", "syn"), effect.type = "cohens.d")
es
es = bootES(data = data_for_es,data.col = "suis2", group.col = "type", contrast = c("control", "syn"), effect.type = "cohens.d")
es
es = bootES(data = data_for_es,data.col = "osiq_vis", group.col = "type", contrast = c("control", "syn"), effect.type = "cohens.d")
es
es = bootES(data = data_for_es,data.col = "osiq_spat", group.col = "type", contrast = c("control", "syn"), effect.type = "cohens.d")
es
es = bootES(data = data_for_es,data.col = "bsfq_calendar", group.col = "type", contrast = c("control", "syn"), effect.type = "cohens.d")
es
es = bootES(data = data_for_es,data.col = "bsfq_number", group.col = "type", contrast = c("control", "syn"), effect.type = "cohens.d")
es
es = bootES(data = data_for_es,data.col = "suis", group.col = "type", contrast = c("control", "syn"), effect.type = "r")
es
es = bootES(data = data_for_es,data.col = "suis2", group.col = "type", contrast = c("control", "syn"), effect.type = "r")
es
es = bootES(data = data_for_es,data.col = "osiq_vis", group.col = "type", contrast = c("control", "syn"), effect.type = "r")
es
es = bootES(data = data_for_es,data.col = "osiq_spat", group.col = "type", contrast = c("control", "syn"), effect.type = "r")
es
es = bootES(data = data_for_es,data.col = "bsfq_calendar", group.col = "type", contrast = c("control", "syn"), effect.type = "r")
es
es = bootES(data = data_for_es,data.col = "bsfq_number", group.col = "type", contrast = c("control", "syn"), effect.type = "r")
es
library(readxl)
data_for_es <- read_excel("data_for_es.xlsx")
View(data_for_es)
data_for_es$type = as.factor(data_for_es$type)
data_for_es = data_for_es[-11,]
es = bootES(data = data_for_es,data.col = "a", group.col = "type", contrast = c("control", "syn"), effect.type = "cohens.d")
es
es = bootES(data = data_for_es,data.col = "b", group.col = "type", contrast = c("control", "syn"), effect.type = "cohens.d")
es
es = bootES(data = data_for_es,data.col = "c", group.col = "type", contrast = c("control", "syn"), effect.type = "cohens.d")
es
es = bootES(data = data_for_es,data.col = "d", group.col = "type", contrast = c("control", "syn"), effect.type = "cohens.d")
es
es = bootES(data = data_for_es,data.col = "e", group.col = "type", contrast = c("control", "syn"), effect.type = "cohens.d")
es
es = bootES(data = data_for_es,data.col = "g", group.col = "type", contrast = c("control", "syn"), effect.type = "cohens.d")
es
es = bootES(data = data_for_es,data.col = "h", group.col = "type", contrast = c("control", "syn"), effect.type = "cohens.d")
es
es = bootES(data = data_for_es,data.col = "a", group.col = "type", contrast = c("control", "syn"), effect.type = "r")
es
es = bootES(data = data_for_es,data.col = "b", group.col = "type", contrast = c("control", "syn"), effect.type = "r")
es
es = bootES(data = data_for_es,data.col = "c", group.col = "type", contrast = c("control", "syn"), effect.type = "r")
es
es = bootES(data = data_for_es,data.col = "d", group.col = "type", contrast = c("control", "syn"), effect.type = "r")
es
es = bootES(data = data_for_es,data.col = "e", group.col = "type", contrast = c("control", "syn"), effect.type = "r")
es
es = bootES(data = data_for_es,data.col = "g", group.col = "type", contrast = c("control", "syn"), effect.type = "r")
es
es = bootES(data = data_for_es,data.col = "h", group.col = "type", contrast = c("control", "syn"), effect.type = "r")
es
View(means_sds2d)
View(lengths2d)
# bootES calculating all in this manner..
library("bootES", lib.loc="~/R/win-library/3.2")
library(readxl)
data_for_es <- read_excel("data_for_es.xlsx")
View(data_for_es)
data_for_es$type = as.factor(data_for_es$type)
data_for_es = data_for_es[-11,]
es = bootES(data = data_for_es,data.col = "age", group.col = "type", contrast = c("control", "syn"), effect.type = "cohens.d")
es
es = bootES(data = data_for_es,data.col = "age", group.col = "type", contrast = c("control", "syn"), effect.type = "r")
es
library(readxl)
data_for_es2 <- read_excel("data_for_es2.xlsx")
View(data_for_es2)
##
data_for_es2$type = as.factor(data_for_es2$type)
data_for_es2$task = as.factor(data_for_es2$task)
View(data_for_es2)
data_for_es2_syn = subset(data_for_es2,type=="syn")
View(data_for_es2_syn)
View(data_for_es2_syn)
data_for_es2_con = subset(data_for_es2,type=="con")
es = bootES(data = data_for_es2_syn,data.col = "trunk", group.col = "task", contrast = c("months", "crazy"), effect.type = "r")
es
es = bootES(data = data_for_es2_syn,data.col = "trunk", group.col = "task", contrast = c("months", "crazy"), effect.type = "cohens.d")
es
library(readxl)
data_for_es2 <- read_excel("data_for_es2.xlsx")
View(data_for_es2)
data_for_es2$type = as.factor(data_for_es2$type)
data_for_es2$task = as.factor(data_for_es2$task)
wit(data_for_es2,dif_trunk = trunk-trunk2)
with(data_for_es2,dif_trunk = trunk-trunk2)
data_for_es2$dif_trunk = data_for_es2$trunk- data_for_es2$trunk2
data_for_es2$dif_head = data_for_es2$head- data_for_es2$head2
data_for_es2$dif_room = data_for_es2$room- data_for_es2$room2
data_for_es2$dif_fit = data_for_es2$fit- data_for_es2$fit2
data_for_es2$dif_ratio = data_for_es2$ratio- data_for_es2$ratio2
data_for_es2_syn = subset(data_for_es2,type=="syn")
data_for_es2_con = subset(data_for_es2,type=="con")
es = bootES(data = data_for_es2_syn,data.col = "dif_trunk", effect.type = "r")
es
es = bootES(data = data_for_es2_syn,data.col = "dif_trunk", effect.type = "cohens.d")
es
data_for_es2$dif_trunk2 = data_for_es2$trunk- data_for_es2$trunk
data_for_es2$dif_head2 = data_for_es2$head- data_for_es2$head
data_for_es2$dif_room2 = data_for_es2$room- data_for_es2$room
data_for_es2$dif_fit2 = data_for_es2$fit- data_for_es2$fit
data_for_es2$dif_ratio2 = data_for_es2$ratio- data_for_es2$ratio
data_for_es2_syn = subset(data_for_es2,type=="syn")
data_for_es2_con = subset(data_for_es2,type=="con")
es = bootES(data = data_for_es2_syn,data.col = "dif_trunk", effect.type = "r")
es
es = bootES(data = data_for_es2_syn,data.col = "dif_trunk", effect.type = "cohens.d")
es
data_for_es2$dif_trunk = data_for_es2$trunk2- data_for_es2$trunk
data_for_es2$dif_head = data_for_es2$head2- data_for_es2$head
data_for_es2$dif_room = data_for_es2$room2- data_for_es2$room
data_for_es2$dif_fit = data_for_es2$fit2- data_for_es2$fit
data_for_es2$dif_ratio = data_for_es2$ratio2- data_for_es2$ratio
data_for_es2_syn = subset(data_for_es2,type=="syn")
data_for_es2_con = subset(data_for_es2,type=="con")
es = bootES(data = data_for_es2_syn,data.col = "dif_trunk", effect.type = "r")
es
es = bootES(data = data_for_es2_syn,data.col = "dif_trunk", effect.type = "cohens.d")
es
es = bootES(data = data_for_es2_syn,data.col = "dif_trunk", effect.type = "r")
es
es = bootES(data = data_for_es2_syn,data.col = "dif_trunk", effect.type = "cohens.d")
es
es = bootES(data = data_for_es2_syn,data.col = "dif_head", effect.type = "r")
es
es = bootES(data = data_for_es2_syn,data.col = "dif_head", effect.type = "cohens.d")
es
es = bootES(data = data_for_es2_syn,data.col = "dif_room", effect.type = "r")
es
es = bootES(data = data_for_es2_syn,data.col = "dif_room", effect.type = "cohens.d")
es
es = bootES(data = data_for_es2_syn,data.col = "dif_fit", effect.type = "r")
es
es = bootES(data = data_for_es2_syn,data.col = "dif_fit", effect.type = "cohens.d")
es
es = bootES(data = data_for_es2_syn,data.col = "dif_ratio", effect.type = "r")
es
es = bootES(data = data_for_es2_syn,data.col = "dif_ratio", effect.type = "cohens.d")
es
es = bootES(data = data_for_es2_con,data.col = "dif_trunk", effect.type = "r")
es
es = bootES(data = data_for_es2_con,data.col = "dif_trunk", effect.type = "cohens.d")
es
es = bootES(data = data_for_es2_con,data.col = "dif_head", effect.type = "r")
es
es = bootES(data = data_for_es2_con,data.col = "dif_head", effect.type = "cohens.d")
es
es = bootES(data = data_for_es2_con,data.col = "dif_room", effect.type = "r")
es
es = bootES(data = data_for_es2_con,data.col = "dif_room", effect.type = "cohens.d")
es
es = bootES(data = data_for_es2_con,data.col = "dif_fit", effect.type = "r")
es
es = bootES(data = data_for_es2_con,data.col = "dif_fit", effect.type = "cohens.d")
es
es = bootES(data = data_for_es2_con,data.col = "dif_ratio", effect.type = "r")
es
es = bootES(data = data_for_es2_con,data.col = "dif_ratio", effect.type = "cohens.d")
es
data_for_es2_con = subset(data_for_es2,type=="con")
data_for_es2_con = subset(data_for_es2,type=="control")
es = bootES(data = data_for_es2_con,data.col = "dif_trunk", effect.type = "r")
es
es = bootES(data = data_for_es2_con,data.col = "dif_trunk", effect.type = "cohens.d")
es
es = bootES(data = data_for_es2_con,data.col = "dif_head", effect.type = "r")
es
es = bootES(data = data_for_es2_con,data.col = "dif_head", effect.type = "cohens.d")
es
es = bootES(data = data_for_es2_con,data.col = "dif_room", effect.type = "r")
es
es = bootES(data = data_for_es2_con,data.col = "dif_room", effect.type = "cohens.d")
es
es = bootES(data = data_for_es2_con,data.col = "dif_fit", effect.type = "r")
es
es = bootES(data = data_for_es2_con,data.col = "dif_fit", effect.type = "cohens.d")
es
es = bootES(data = data_for_es2_con,data.col = "dif_ratio", effect.type = "r")
es
es = bootES(data = data_for_es2_con,data.col = "dif_ratio", effect.type = "cohens.d")
es
View(lengths2d)
View(lengths2d)
## TODO: compute outliers
# means per month/participant
means2d = aggregate(data2d[c("mouse_x","mouse_y")],data2d[c("month_no","user_id")],mean)
View(means2d)
View(means2d)
View(data2d)
## advanced outlier procedure - NEW
library(plyr)
advOutlierRemoval2d = function(subs){
localMean = c(mean(subs$mouse_x),mean(subs$mouse_y))
distanceList =  data.frame(distances=numeric(nrow(subs)))
for (i in 1:nrow(subs)){
localPoint = c(subs$mouse_x[i],subs$mouse_y[i])
distance = dist(rbind(localMean,localPoint))
distanceList$distances[i]=distance[1]
}
avDist = mean(distanceList$distance)
for(i in 1:nrow(subs)){
outlierRatio = distanceList$distances[i]/avDist
if (outlierRatio>2.5){
subs$outlier[i] = 1
}
}
return(subs)
}
outlier2d = ddply(data2d,.(user_id,month_no),advOutlierRemoval2d)
Q
outlier2d = ddply(data2d,.(user_id,month_no),advOutlierRemoval2d)
Q
outlier2d = data2d
outlier2d$outlier = 0
View(outlier2d)
outlier2d = ddply(data2d,.(user_id,month_no),advOutlierRemoval2d)
Q
outlier2d = data2d[,-c(2,3)]
View(outlier2d)
outlier2d = ddply(data2d,.(user_id,month_no),advOutlierRemoval2d)
Q
outlier2d = subset(outlier2d,user_id=="Co1_2D" & month_no=="may")
test = advOutlierRemoval2d((outlier2d))
View(test)
outlier2d$outlier = 0
test = advOutlierRemoval2d((outlier2d))
View(test)
advOutlierRemoval2d = function(subs){
localMean = c(mean(subs$mouse_x),mean(subs$mouse_y))
distanceList =  data.frame(distances=numeric(nrow(subs)))
for (i in 1:nrow(subs)){
localPoint = c(subs$mouse_x[i],subs$mouse_y[i])
distance = dist(rbind(localMean,localPoint))
distanceList$distances[i]=distance[1]
}
avDist = mean(distanceList$distance)
for(i in 1:nrow(subs)){
outlierRatio = distanceList$distances[i]/avDist
if (outlierRatio>1.1){
subs$outlier[i] = 1
}
}
return(subs)
}
test = advOutlierRemoval2d((outlier2d))
advOutlierRemoval2d = function(subs){
localMean = c(mean(subs$mouse_x),mean(subs$mouse_y))
distanceList =  data.frame(distances=numeric(nrow(subs)))
for (i in 1:nrow(subs)){
localPoint = c(subs$mouse_x[i],subs$mouse_y[i])
distance = dist(rbind(localMean,localPoint))
distanceList$distances[i]=distance[1]
}
avDist = mean(distanceList$distance)
for(i in 1:nrow(subs)){
outlierRatio = distanceList$distances[i]/avDist
if (outlierRatio>2.5){
subs$outlier[i] = 1
}
}
return(subs)
}
outlier2d = data2d[,-c(2,3)]
outlier2d$outlier = 0
test = ddply(outlier2d,.(user_id,month_no),advOutlierRemoval2d)
View(test)
outlier2d_count = subset(outlier2d,outlier==1)
outlier2d_count = subset(test,outlier==1)
View(outlier2d_count)
outlier2d2 = subset(outlier2d,user_id=="Co1_2D" & month_no=="mar")
test2 = advOutlierRemoval2d((outlier2d))
View(test2)
test2 = advOutlierRemoval2d((outlier2d2))
View(test2)
View(data_for_es)
library(readxl)
X2dconsistency <- read_excel("2dconsistency.xlsx")
View(X2dconsistency)
## 2d consistency
X2dconsistency$group = factor(X2dconsistency$group)
View(X2dconsistency)
# bootES calculating all in this manner..
library("bootES", lib.loc="~/R/win-library/3.2")
es = bootES(data = X2dconsistency,data.col = "2Dmean", group.col = "group", contrast = c("c", "s"), effect.type = "r")
es
es = bootES(data = X2dconsistency,data.col = "2Dmean", group.col = "group", contrast = c("c", "s"), effect.type = "cohens.d")
es
es = bootES(data = X2dconsistency,data.col = "2Dxaxis", group.col = "group", contrast = c("c", "s"), effect.type = "r")
es
es = bootES(data = X2dconsistency,data.col = "2Dxaxis", group.col = "group", contrast = c("c", "s"), effect.type = "cohens.d")
es
es = bootES(data = X2dconsistency,data.col = "2Dyaxis", group.col = "group", contrast = c("c", "s"), effect.type = "r")
es
es = bootES(data = X2dconsistency,data.col = "2Dyaxis", group.col = "group", contrast = c("c", "s"), effect.type = "cohens.d")
es
View(didall2d)
View(data2d)
View(lengths2d)
View(data_for_es2)
